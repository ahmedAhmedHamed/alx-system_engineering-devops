{
    "kind": "Listing",
    "data": {
        "after": "t3_1b4mn60",
        "dist": 12,
        "modhash": "",
        "geo_filter": null,
        "children": [
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Sunday Daily Thread: What's everyone working on this week?",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b52uds",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.77,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 7,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 7,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709424008.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? \ud83d\udee0\ufe0f&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1b52uds",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 25,
                    "send_replies": false,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b52uds/sunday_daily_thread_whats_everyone_working_on/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": true,
                    "url": "https://www.reddit.com/r/Python/comments/1b52uds/sunday_daily_thread_whats_everyone_working_on/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709424008.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Tuesday Daily Thread: Advanced questions",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b6qj7t",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.67,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 1,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 1,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709596810.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                                    "width": 512,
                                    "height": 288
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                        "width": 108,
                                        "height": 60
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                        "width": 216,
                                        "height": 121
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                        "width": 320,
                                        "height": 180
                                    }
                                ],
                                "variants": {},
                                "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1b6qj7t",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": false,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b6qj7t/tuesday_daily_thread_advanced_questions/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": true,
                    "url": "https://www.reddit.com/r/Python/comments/1b6qj7t/tuesday_daily_thread_advanced_questions/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709596810.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# What My Project Does\n\nSitcom Simulator is a python/CLI tool that takes any text prompt (for example, \"Joe Biden vs. Donald Trump: ultimate weightlifting competition\") and turns it into a bizarre meme video with realistic images and voices. The tool is essentially duct tape that combines various AI tools into one unholy abomination:\n\n* ChatGPT generates the video script.\n* FakeYou generates voices for the characters.\n* Stable Diffusion generates images of the characters.\n* Freepd provides the background music.\n* FFmpeg connects the images and voices into a movie.\n\n# Target Audience\n\nPeople who like making memes, funny videos, or weird AI \"art\" but are too lazy to do it manually.\n\nThe code is fairly customizable and extendable; it could probably be used as a base for many types of AI video generation projects even if your use case is somewhat different.\n\n# Comparison\n\nThere are many AI video editing tools out there (e.g., Kapwing), almost all of which are complicated commercial products with a vague notion of improving \"productivity\" or whatever. In contrast, Sitcom Simulator is simple, open source, and the only AI video tool focused on humor, memes, and wasting your time with terrible brain rot.\n\n# GitHub\n\nCode, documentation, and example videos can all be found on GitHub:\n\n[https://github.com/joshmoody24/sitcom-simulator](https://github.com/joshmoody24/sitcom-simulator)",
                    "author_fullname": "t2_710t43kv",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Sitcom Simulator: a tool for generating weird AI meme videos",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b6z27b",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.85,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 42,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 42,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709621892.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;Sitcom Simulator is a python/CLI tool that takes any text prompt (for example, &amp;quot;Joe Biden vs. Donald Trump: ultimate weightlifting competition&amp;quot;) and turns it into a bizarre meme video with realistic images and voices. The tool is essentially duct tape that combines various AI tools into one unholy abomination:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ChatGPT generates the video script.&lt;/li&gt;\n&lt;li&gt;FakeYou generates voices for the characters.&lt;/li&gt;\n&lt;li&gt;Stable Diffusion generates images of the characters.&lt;/li&gt;\n&lt;li&gt;Freepd provides the background music.&lt;/li&gt;\n&lt;li&gt;FFmpeg connects the images and voices into a movie.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;People who like making memes, funny videos, or weird AI &amp;quot;art&amp;quot; but are too lazy to do it manually.&lt;/p&gt;\n\n&lt;p&gt;The code is fairly customizable and extendable; it could probably be used as a base for many types of AI video generation projects even if your use case is somewhat different.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;There are many AI video editing tools out there (e.g., Kapwing), almost all of which are complicated commercial products with a vague notion of improving &amp;quot;productivity&amp;quot; or whatever. In contrast, Sitcom Simulator is simple, open source, and the only AI video tool focused on humor, memes, and wasting your time with terrible brain rot.&lt;/p&gt;\n\n&lt;h1&gt;GitHub&lt;/h1&gt;\n\n&lt;p&gt;Code, documentation, and example videos can all be found on GitHub:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/joshmoody24/sitcom-simulator\"&gt;https://github.com/joshmoody24/sitcom-simulator&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?auto=webp&amp;s=21bde4152c8945b07905bfc753a79d4de407e7bf",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e316b65664d96c57ece9160ac61e581fbb362247",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=fd39e0bee5318c4da5c3353e0ab81b49ad6a2f53",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=cb6122e56c344da54e02320ad01977f6ca2f5d4a",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=398ef975267dd163f7b1c852dbbd04882f6a057a",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=b74a8f08f2b0025d1d9497f9dff15de6c6730e21",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/vDE4CAXNsER6N7lXgQDK9spiu-NG15jz7YbezvarpKA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d367887f12a7f6500bdb90cf73826c11cdd2c9d1",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "MKIRysG-bXTwvQ7AGnilflCeWdU-y-B89_PFN2pu208"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1b6z27b",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "ricekrispysawdust",
                    "discussion_type": null,
                    "num_comments": 11,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b6z27b/sitcom_simulator_a_tool_for_generating_weird_ai/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b6z27b/sitcom_simulator_a_tool_for_generating_weird_ai/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709621892.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hello everyone, \n\nWe're happy to announce that our Stratosphere Laboratory has been accepted as a mentor organization in the Google Summer of Code 2024!  \n\n\nProjects you can contribute to are our Intrusion Prevention System and our AI VPN:\n\n[https://github.com/stratosphereips/StratosphereLinuxIPS](https://github.com/stratosphereips/StratosphereLinuxIPS)\n\n[https://github.com/stratosphereips/AIVPN](https://github.com/stratosphereips/AIVPN)\n\n  \nCheck out our ideas list here:  \n[https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/list\\_of\\_ideas.md](https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/list_of_ideas.md)\n\n  \nIf you think you have the required skills to contribute, you can check the contributor guide here:  \n[https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/contributor\\_guide.md](https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/contributor_guide.md)\n\n  \nYou can join our discord if you have more questions  \n[https://discord.gg/zu5HwMFy5C](https://discord.gg/zu5HwMFy5C)\n\n  \nLet's make this summer a memorable one!  \ud83d\ude80 \ud83d\ude80",
                    "author_fullname": "t2_i7mh4kst",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Contribute to Python cybersecurity projects in GSoC 2024!",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b75dwk",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.86,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 5,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 5,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709645885.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone, &lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re happy to announce that our Stratosphere Laboratory has been accepted as a mentor organization in the Google Summer of Code 2024!  &lt;/p&gt;\n\n&lt;p&gt;Projects you can contribute to are our Intrusion Prevention System and our AI VPN:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/stratosphereips/StratosphereLinuxIPS\"&gt;https://github.com/stratosphereips/StratosphereLinuxIPS&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/stratosphereips/AIVPN\"&gt;https://github.com/stratosphereips/AIVPN&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Check out our ideas list here:&lt;br/&gt;\n&lt;a href=\"https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/list_of_ideas.md\"&gt;https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/list_of_ideas.md&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you think you have the required skills to contribute, you can check the contributor guide here:&lt;br/&gt;\n&lt;a href=\"https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/contributor_guide.md\"&gt;https://github.com/stratosphereips/Google-Summer-of-Code/blob/main/contributor_guide.md&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can join our discord if you have more questions&lt;br/&gt;\n&lt;a href=\"https://discord.gg/zu5HwMFy5C\"&gt;https://discord.gg/zu5HwMFy5C&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s make this summer a memorable one!  \ud83d\ude80 \ud83d\ude80&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?auto=webp&amp;s=3c96448fdea89278be5ff68c2a0605d146c2afe7",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=cdcc9d296ebde9fd9b3d6d9d45454d0762795a3d",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4011025936b64221cabfb24b70c9df8fc8ee993c",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fd9bd337f830a7d92548eda0c418b2c9973e7a9f",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6c38297a01b38dbf2ff0f3f1dfe7603e329268df",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=52dc6d3a59c7ceb1f1700b3e5730e832fff2758b",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/FmsBcylC2vOhP7q1PpdtvmVj4uxfMEQ02KZryhJOD1Q.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=426971ba4a75f5935b66feef31dd34019c85ef88",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "vOQlMrqxXYZkl6FcSZZefXyssjn0PtXI_tUDfx6qdkM"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1b75dwk",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "stratospherelab",
                    "discussion_type": null,
                    "num_comments": 1,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b75dwk/contribute_to_python_cybersecurity_projects_in/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b75dwk/contribute_to_python_cybersecurity_projects_in/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709645885.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Anaconda 2024-02 is released:\n\n* python 3.11.7\n* conda 24.1.2\n* numpy 1.26.3\n* pandas 2.1.4\n* matplotlib 3.8.0\n* jupyterlab 4.0.11\n* spyder 5.4.3\n\nThis newer version of conda uses the libmamba solver by default which has a number of performance improvements over the classic solver. The JupyterLab Variable Inspector extension is also preinstalled.\n\n[https://docs.anaconda.com/free/anaconda/release-notes/](https://docs.anaconda.com/free/anaconda/release-notes/)",
                    "author_fullname": "t2_rgcg4",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Anaconda 2024-02 Release Notes",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": true,
                    "name": "t3_1b77usx",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.5,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709652360.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Anaconda 2024-02 is released:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;python 3.11.7&lt;/li&gt;\n&lt;li&gt;conda 24.1.2&lt;/li&gt;\n&lt;li&gt;numpy 1.26.3&lt;/li&gt;\n&lt;li&gt;pandas 2.1.4&lt;/li&gt;\n&lt;li&gt;matplotlib 3.8.0&lt;/li&gt;\n&lt;li&gt;jupyterlab 4.0.11&lt;/li&gt;\n&lt;li&gt;spyder 5.4.3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This newer version of conda uses the libmamba solver by default which has a number of performance improvements over the classic solver. The JupyterLab Variable Inspector extension is also preinstalled.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://docs.anaconda.com/free/anaconda/release-notes/\"&gt;https://docs.anaconda.com/free/anaconda/release-notes/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1b77usx",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "PhilipYip",
                    "discussion_type": null,
                    "num_comments": 4,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b77usx/anaconda_202402_release_notes/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b77usx/anaconda_202402_release_notes/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709652360.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# What my Project Does?\n\nYoutility helps you to download YouTube content locally. With Youtility, you can download:\r  \n\r\n\n* Single videos with captions file\r\n* Playlists (also as audio-only files)\n* Video to Mp3\r\n\n# Target Audience\n\nPeople who want to save YouTube playlists/videos locally who don't wanna use command line tools like PyTube.\n\n# Comparison\n\nUnlike existing alternatives, Youtility helps you to download even an entire playlist as audio files. It can also download XML captions for you. Plus, it also has a great UI.\n\n# GitHub\n\nGitHub Link: [https://github.com/rohankishore/Youtility](https://github.com/rohankishore/Youtility)",
                    "author_fullname": "t2_9ia8btxb",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I made a YouTube downloader with Modern UI | PyQt6 | PyTube | Fluent Design",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b66726",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.93,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 237,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 237,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709542049.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What my Project Does?&lt;/h1&gt;\n\n&lt;p&gt;Youtility helps you to download YouTube content locally. With Youtility, you can download:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Single videos with captions file&lt;/li&gt;\n&lt;li&gt;Playlists (also as audio-only files)&lt;/li&gt;\n&lt;li&gt;Video to Mp3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;People who want to save YouTube playlists/videos locally who don&amp;#39;t wanna use command line tools like PyTube.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Unlike existing alternatives, Youtility helps you to download even an entire playlist as audio files. It can also download XML captions for you. Plus, it also has a great UI.&lt;/p&gt;\n\n&lt;h1&gt;GitHub&lt;/h1&gt;\n\n&lt;p&gt;GitHub Link: &lt;a href=\"https://github.com/rohankishore/Youtility\"&gt;https://github.com/rohankishore/Youtility&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?auto=webp&amp;s=ddafac539c50167e2b883b6445c4e5ff8080afe5",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3e34fa2ed861093be82ef2996a3835a49dd6eba4",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=519d954ba198c3acec05fba6b3b91f6eef235213",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=bd009e72f96c5e6e10e9a38b5a15ed951fd5745f",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1e4b90ef6bc4bb764ac2677b59f1307722412043",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=df401f014534a0deb969c4ee4326beb3c924c30e",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kPMJxckb5ypQ_TQsKMoRWl0_QYldHgG58Z2dQ3uawFY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f38cb750c14399217db999060aec688830fda077",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "79SYzGRhzC8TB2JUQojB2bzPXpBnuBDtdhTNVIwrlAY"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1b66726",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Specialist-Arachnid6",
                    "discussion_type": null,
                    "num_comments": 59,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b66726/i_made_a_youtube_downloader_with_modern_ui_pyqt6/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b66726/i_made_a_youtube_downloader_with_modern_ui_pyqt6/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709542049.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "    class Movable:\n    def __init__(self, x, y, dx, dy, worldwidth, worldheight):\n        \"\"\"automatically sets the given arguments. Can be reused with any class that has an order of named args.\"\"\"\n        \n        nonmembers = [] #populate with names that should not become members and will be used later. In many simple classes, this can be left empty.\n        \n        for key, value in list(locals().items())[1:]: #exclude 'self', which is the first entry.\n            if not key in nonmembers:\n                setattr(self, key, value)\n    \n        #handle all nonmembers and assign other members:\n    \n        return\n\nI always hate how redundant and bothersome it is to type \"self.member = member\" 10+ times, and this code does work the way I want it to. It's pretty readable in my opinion, especially with the documentation. That aside, is it considered acceptable practice in python? Will other developers get annoyed if I use it?\n\nEdit:  Thanks for the very fast replies. Data classes it is! I meant for this to be a discussion of code conventions, but since I learned about a completely new feature to me, I guess this post belongs in r/learpython.",
                    "author_fullname": "t2_2v6vdzwz",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I hate typing out every 'self.x = x' line in an __init__ method. Is this alternative acceptable?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b5bc8g",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.87,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 280,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 280,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1709451598.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709450771.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;class Movable:\ndef __init__(self, x, y, dx, dy, worldwidth, worldheight):\n    &amp;quot;&amp;quot;&amp;quot;automatically sets the given arguments. Can be reused with any class that has an order of named args.&amp;quot;&amp;quot;&amp;quot;\n\n    nonmembers = [] #populate with names that should not become members and will be used later. In many simple classes, this can be left empty.\n\n    for key, value in list(locals().items())[1:]: #exclude &amp;#39;self&amp;#39;, which is the first entry.\n        if not key in nonmembers:\n            setattr(self, key, value)\n\n    #handle all nonmembers and assign other members:\n\n    return\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I always hate how redundant and bothersome it is to type &amp;quot;self.member = member&amp;quot; 10+ times, and this code does work the way I want it to. It&amp;#39;s pretty readable in my opinion, especially with the documentation. That aside, is it considered acceptable practice in python? Will other developers get annoyed if I use it?&lt;/p&gt;\n\n&lt;p&gt;Edit:  Thanks for the very fast replies. Data classes it is! I meant for this to be a discussion of code conventions, but since I learned about a completely new feature to me, I guess this post belongs in &lt;a href=\"/r/learpython\"&gt;r/learpython&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1b5bc8g",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "MomICantPauseReddit",
                    "discussion_type": null,
                    "num_comments": 120,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b5bc8g/i_hate_typing_out_every_selfx_x_line_in_an_init/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b5bc8g/i_hate_typing_out_every_selfx_x_line_in_an_init/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709450771.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "[https://github.com/kernel137/shavis](https://github.com/kernel137/shavis)  \nInstall with\n\n`pip install shavis`   \nshavis is (secure hash algorithm visualization), is a CLI tool that can hash any file (Only through SHA256) and create an 8x8 pixel image displaying the hash through themed colours.   \n\n\n**What My Project Does**:\n\nMain functionality of this CLI tool is taking the 64 digit hex number (SHA256 hash) and, through 16 hex colors in ascending order, turning it into a 8x8 pixel image that can then be scaled to powers of two.  \nShavis also supports piping: `echo -n \"Hello World!\" | shavis`\n\nThis also works for git hashes, since git hashes are SHA1, images for this hash are 8x5, I think with some clever integration, its possible to integrate a small res picture of a git commit hash  to quickly visualize the hash within vscode or some other platform.  \nA quick way to get a visual of the last git commit while within a local git repository is:\n\n`git rev-parse HEAD | shavis -g`\n\nWhat do you guys think? Is it a worthwhile investment to implement other hashes? Is it an interesting project? Do you guys have any ideas about what to add to it?  \n",
                    "author_fullname": "t2_thazsphq",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "shavis - Visualize SHA256 and SHA1",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b5em7s",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.92,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 39,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 39,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709463643.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/kernel137/shavis\"&gt;https://github.com/kernel137/shavis&lt;/a&gt;&lt;br/&gt;\nInstall with&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pip install shavis&lt;/code&gt;&lt;br/&gt;\nshavis is (secure hash algorithm visualization), is a CLI tool that can hash any file (Only through SHA256) and create an 8x8 pixel image displaying the hash through themed colours.   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Main functionality of this CLI tool is taking the 64 digit hex number (SHA256 hash) and, through 16 hex colors in ascending order, turning it into a 8x8 pixel image that can then be scaled to powers of two.&lt;br/&gt;\nShavis also supports piping: &lt;code&gt;echo -n &amp;quot;Hello World!&amp;quot; | shavis&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This also works for git hashes, since git hashes are SHA1, images for this hash are 8x5, I think with some clever integration, its possible to integrate a small res picture of a git commit hash  to quickly visualize the hash within vscode or some other platform.&lt;br/&gt;\nA quick way to get a visual of the last git commit while within a local git repository is:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;git rev-parse HEAD | shavis -g&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;What do you guys think? Is it a worthwhile investment to implement other hashes? Is it an interesting project? Do you guys have any ideas about what to add to it?  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?auto=webp&amp;s=cde086dd929f2a6294cc2a18e89598500884ffe6",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d752981fa39dfe503f85fbaaf395f0648f777874",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e143b2d842bf1931b66661b853d5232b4a3baf3d",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5e336f4132f5da1b83dd7d750bfada6170419569",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=62bf780a06a7aed48f1f748de47faf67e3aebccd",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e4a31c3ef12591cf7822a6d9dcf015088e02cf8d",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/J5Ymfd9mF0GSx7dif8nqEJoJMpAm-JAVqPnAhvIQEmQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6a73aa54ac10aa653bd8a671570019f2e3dd264d",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "pUKr_Pc-G5hGRE_H2VI6GYvJuGNDd-0QFWvOoELrmEI"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1b5em7s",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "perfectminimalism",
                    "discussion_type": null,
                    "num_comments": 10,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b5em7s/shavis_visualize_sha256_and_sha1/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b5em7s/shavis_visualize_sha256_and_sha1/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709463643.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Thread: Project Ideas \ud83d\udca1\n\nWelcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.\n\n## How it Works:\n\n1. **Suggest a Project**: Comment your project idea\u2014be it beginner-friendly or advanced.\n2. **Build &amp; Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.\n3. **Explore**: Looking for ideas? Check out Al Sweigart's [\"The Big Book of Small Python Projects\"](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.\n\n## Guidelines:\n\n* Clearly state the difficulty level.\n* Provide a brief description and, if possible, outline the tech stack.\n* Feel free to link to tutorials or resources that might help.\n\n# Example Submissions:\n\n## Project Idea: Chatbot\n\n**Difficulty**: Intermediate\n\n**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar \n\n**Description**: Create a chatbot that can answer FAQs for a website.\n\n**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)\n\n# Project Idea: Weather Dashboard\n\n**Difficulty**: Beginner\n\n**Tech Stack**: HTML, CSS, JavaScript, API\n\n**Description**: Build a dashboard that displays real-time weather information using a weather API.\n\n**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)\n\n## Project Idea: File Organizer\n\n**Difficulty**: Beginner\n\n**Tech Stack**: Python, File I/O\n\n**Description**: Create a script that organizes files in a directory into sub-folders based on file type.\n\n**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)\n\nLet's help each other grow. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Monday Daily Thread: Project ideas!",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b5wbuu",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.6,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 2,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 2,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709510408.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Project Ideas \ud83d\udca1&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our weekly Project Ideas thread! Whether you&amp;#39;re a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Suggest a Project&lt;/strong&gt;: Comment your project idea\u2014be it beginner-friendly or advanced.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Build &amp;amp; Share&lt;/strong&gt;: If you complete a project, reply to the original comment, share your experience, and attach your source code.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Explore&lt;/strong&gt;: Looking for ideas? Check out Al Sweigart&amp;#39;s &lt;a href=\"https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242\"&gt;&amp;quot;The Big Book of Small Python Projects&amp;quot;&lt;/a&gt; for inspiration.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Clearly state the difficulty level.&lt;/li&gt;\n&lt;li&gt;Provide a brief description and, if possible, outline the tech stack.&lt;/li&gt;\n&lt;li&gt;Feel free to link to tutorials or resources that might help.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Example Submissions:&lt;/h1&gt;\n\n&lt;h2&gt;Project Idea: Chatbot&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, NLP, Flask/FastAPI/Litestar &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot that can answer FAQs for a website.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=a37BL0stIuM\"&gt;Building a Chatbot with Python&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Project Idea: Weather Dashboard&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: HTML, CSS, JavaScript, API&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Build a dashboard that displays real-time weather information using a weather API.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=9P5MY_2i7K8\"&gt;Weather API Tutorial&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Project Idea: File Organizer&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;: Python, File I/O&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a script that organizes files in a directory into sub-folders based on file type.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;: &lt;a href=\"https://automatetheboringstuff.com/2e/chapter9/\"&gt;Automate the Boring Stuff: Organizing Files&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other grow. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1b5wbuu",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": false,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b5wbuu/monday_daily_thread_project_ideas/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b5wbuu/monday_daily_thread_project_ideas/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709510408.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# What My Project Does\n\n[Rob's Awesome Python Template](https://github.com/tedivm/robs_awesome_python_template) is a cookiecutter template meant to bootstrap python projects using modern best practices.\n\nAt the very basic level it includes:\n\n- Modern `pyproject.toml` without any legacy files (no setup.py or setup.cfg).\n- Development Management using [Makefiles](https://www.gnu.org/software/make/manual/html_node/Introduction.html).\n- Configuration Management with [Pydantic](https://docs.pydantic.dev/usage/settings/).\n- PyPI Publishing from Git Tags using [setuptools-scm](https://pypi.org/project/setuptools-scm/).\n- Formatting and Linting with [Ruff](https://docs.astral.sh/ruff/).\n- Typing with [mypy](https://mypy.readthedocs.io/en/stable/).\n- Lockfiles (requirements.txt, requirements-dev.txt) with [uv](https://pypi.org/project/uv/).\n- Testing with [pytest](https://docs.pytest.org/en/7.2.x/).\n- CI/CD using [Github Actions](https://docs.github.com/en/actions).\n- Precommit Hooks using the [precommit framework](https://pre-commit.com/).\n\nIt also has a ton of optional features:\n\n- Github Actions for CI\n- Cross Platform (arm, arm64, amd64) Docker containers using the [Multi-Py](https://github.com/multi-py/) project.\n- Optionally use any combination of FastAPI, Click/Typer, Celery, and Sqlalchemy.\n\nI've used this template for a number of projects- [QuasiQueue](https://github.com/tedivm/quasiqueue), [Paracelsus](https://github.com/tedivm/paracelsus), and [Fedimapper](https://github.com/tedivm/fedimapper) being some nice examples. If you want to see exactly what the project would generate today you can [review the examples repository](https://github.com/tedivm/robs_awesome_python_template_examples) which builds a few projects using different options to give people a feel for what things can look like.\n\n# Target Audience\n\nAny developer looking to bootstrap their projects can use this! What makes it really helpful is that you get a modern, high quality project with tools already configured before you even write a single line of code. Even if all you're doing is creating a POC this template can help you do it with style.\n\n# Comparison\n\nAlthough there are other templates out there, this project is unique in a few ways:\n\n* It is extremely modern, using tools such as `Ruff` and `UV` while also removing legacy fluff such as `setup.py`.\n* It isn't targeted towards a specific type of software (library, cli, app) but can be used for a variety of project types, or even for projects with multiple entry points.\n* It uses Cookiecutter, rather than direct git forking, to fill in fields and customize the project so you can get started right away after running it.\n\n# Try it now!\n\nIf you haven't installed Cookiecutter yet it's pretty easy on most platforms. With homebrew, for instance, just run `brew install cookiecutter`.\n\nFrom there-\n\n```\ncookiecutter gh:tedivm/robs_awesome_python_template\n```",
                    "author_fullname": "t2_346wh",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "An extremely modern and configurable Python project template",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b4qwds",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.88,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 129,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 129,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1709393913.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709393546.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/tedivm/robs_awesome_python_template\"&gt;Rob&amp;#39;s Awesome Python Template&lt;/a&gt; is a cookiecutter template meant to bootstrap python projects using modern best practices.&lt;/p&gt;\n\n&lt;p&gt;At the very basic level it includes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Modern &lt;code&gt;pyproject.toml&lt;/code&gt; without any legacy files (no setup.py or setup.cfg).&lt;/li&gt;\n&lt;li&gt;Development Management using &lt;a href=\"https://www.gnu.org/software/make/manual/html_node/Introduction.html\"&gt;Makefiles&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Configuration Management with &lt;a href=\"https://docs.pydantic.dev/usage/settings/\"&gt;Pydantic&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;PyPI Publishing from Git Tags using &lt;a href=\"https://pypi.org/project/setuptools-scm/\"&gt;setuptools-scm&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Formatting and Linting with &lt;a href=\"https://docs.astral.sh/ruff/\"&gt;Ruff&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Typing with &lt;a href=\"https://mypy.readthedocs.io/en/stable/\"&gt;mypy&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Lockfiles (requirements.txt, requirements-dev.txt) with &lt;a href=\"https://pypi.org/project/uv/\"&gt;uv&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Testing with &lt;a href=\"https://docs.pytest.org/en/7.2.x/\"&gt;pytest&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;CI/CD using &lt;a href=\"https://docs.github.com/en/actions\"&gt;Github Actions&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;Precommit Hooks using the &lt;a href=\"https://pre-commit.com/\"&gt;precommit framework&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It also has a ton of optional features:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Github Actions for CI&lt;/li&gt;\n&lt;li&gt;Cross Platform (arm, arm64, amd64) Docker containers using the &lt;a href=\"https://github.com/multi-py/\"&gt;Multi-Py&lt;/a&gt; project.&lt;/li&gt;\n&lt;li&gt;Optionally use any combination of FastAPI, Click/Typer, Celery, and Sqlalchemy.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;ve used this template for a number of projects- &lt;a href=\"https://github.com/tedivm/quasiqueue\"&gt;QuasiQueue&lt;/a&gt;, &lt;a href=\"https://github.com/tedivm/paracelsus\"&gt;Paracelsus&lt;/a&gt;, and &lt;a href=\"https://github.com/tedivm/fedimapper\"&gt;Fedimapper&lt;/a&gt; being some nice examples. If you want to see exactly what the project would generate today you can &lt;a href=\"https://github.com/tedivm/robs_awesome_python_template_examples\"&gt;review the examples repository&lt;/a&gt; which builds a few projects using different options to give people a feel for what things can look like.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Any developer looking to bootstrap their projects can use this! What makes it really helpful is that you get a modern, high quality project with tools already configured before you even write a single line of code. Even if all you&amp;#39;re doing is creating a POC this template can help you do it with style.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;Although there are other templates out there, this project is unique in a few ways:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It is extremely modern, using tools such as &lt;code&gt;Ruff&lt;/code&gt; and &lt;code&gt;UV&lt;/code&gt; while also removing legacy fluff such as &lt;code&gt;setup.py&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;It isn&amp;#39;t targeted towards a specific type of software (library, cli, app) but can be used for a variety of project types, or even for projects with multiple entry points.&lt;/li&gt;\n&lt;li&gt;It uses Cookiecutter, rather than direct git forking, to fill in fields and customize the project so you can get started right away after running it.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Try it now!&lt;/h1&gt;\n\n&lt;p&gt;If you haven&amp;#39;t installed Cookiecutter yet it&amp;#39;s pretty easy on most platforms. With homebrew, for instance, just run &lt;code&gt;brew install cookiecutter&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;From there-&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ncookiecutter gh:tedivm/robs_awesome_python_template\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?auto=webp&amp;s=f60f18b13e1d391094bf3ea606f364ae49190321",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2f21a0b318164c03829bedba98f974f999ed69ad",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=bf14f570a260f929aca33f9e1c9f66f7cc70728b",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=232e8a62ce2afd7f54d624b15d7303760375b662",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fff2b0a66cdf3a479e24dc94deaf6a963eeea79b",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=584cd9f768c10109f2835ccae7a359d2e2b98026",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/5saFhEjk6O8SlGrV3LZGEQZvf9MKoBb6Jjq-i_4ClGc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=aaf23b7683ff9605bcaa032ae7a94cb32a65ba74",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "61azO2I86esVueKPPTdvGPmGrk9jfu3aVw7mR1AO_d0"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1b4qwds",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "tedivm",
                    "discussion_type": null,
                    "num_comments": 22,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b4qwds/an_extremely_modern_and_configurable_python/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b4qwds/an_extremely_modern_and_configurable_python/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709393546.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I\u2019m wondering if anyone has ever seen a case of code using `eval()` and thought to themselves \u201cyeah actually that\u2019s probably the right way to do it\u201d?\n\nMy understanding has always been that it\u2019s a huge security risk and generally a recipe for disaster.\n\nBut I was just working on a task where I couldn\u2019t really figure out any other way to achieve the dynamic functionality I was looking for, so I wrote code that assembles a string to do what I need, and then runs `eval()` on that string. Pretty sure this is the first time I\u2019ve ever used `eval()` at all.\n\nIt\u2019s a low-stakes proof of concept for a totally internal tool, so I\u2019m not hugely worried about security at the moment, but it just feels so icky to do something like that. I\u2019m curious if in others\u2019 experience there\u2019s *always* a better way than using `eval()`, or if sometimes it\u2019s legit.\n",
                    "author_fullname": "t2_vbvkzt2h",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Valid uses of eval()?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b49p6d",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.9,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 130,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 130,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709337208.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019m wondering if anyone has ever seen a case of code using &lt;code&gt;eval()&lt;/code&gt; and thought to themselves \u201cyeah actually that\u2019s probably the right way to do it\u201d?&lt;/p&gt;\n\n&lt;p&gt;My understanding has always been that it\u2019s a huge security risk and generally a recipe for disaster.&lt;/p&gt;\n\n&lt;p&gt;But I was just working on a task where I couldn\u2019t really figure out any other way to achieve the dynamic functionality I was looking for, so I wrote code that assembles a string to do what I need, and then runs &lt;code&gt;eval()&lt;/code&gt; on that string. Pretty sure this is the first time I\u2019ve ever used &lt;code&gt;eval()&lt;/code&gt; at all.&lt;/p&gt;\n\n&lt;p&gt;It\u2019s a low-stakes proof of concept for a totally internal tool, so I\u2019m not hugely worried about security at the moment, but it just feels so icky to do something like that. I\u2019m curious if in others\u2019 experience there\u2019s &lt;em&gt;always&lt;/em&gt; a better way than using &lt;code&gt;eval()&lt;/code&gt;, or if sometimes it\u2019s legit.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1b49p6d",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "not_dmr",
                    "discussion_type": null,
                    "num_comments": 77,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b49p6d/valid_uses_of_eval/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b49p6d/valid_uses_of_eval/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709337208.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "[https://github.com/icyveins7/sew](https://github.com/icyveins7/sew)\n\n# Motivation\n\nThis project started because at work I realised I was copying / editing code to create tables / insert rows etc in many different scripts. Oftentimes the structure of the tables, and the way I inserted the data, was the same; just inserting all columns.\n\nSo at first I started auto-generating my CREATE TABLE and INSERT statements, but then it eventually grew into this.\n\n# What This Project Does\n\nThe goal of this package is essentially to reduce the code typed for simple CRUD operations.\n\nI pretty much only use this now because I can always dip down to make custom statements if I want to anyway (which still happens for more complex things like inner joins).\n\nHere's an example:\n\nBefore:\n\n    import sqlite3 as sq\n    con = sq.connect(\"path/to/db\")\n    cur = con.cursor()\n    cur.execute(\"select * from mytable where ...\")\n    results = cur.fetchall()\n\nAfter:\n\n    import sew\n    db = sew.Database(\"path/to/db\")\n    db['mytable'].select(\"*\", ...)\n    results = db.fetchall()\n\n# Target Audience\n\nThis is really for anyone who uses SQLite from python\u2019s in built library.\n\nHopefully someone else will find this useful; it\u2019s my first ever package uploaded to PyPI so things may not be as crisp as they should be, but constructive feedback is welcome. Otherwise, ask me anything here!\n\n# Comparisons\n\nI think there are other libraries out there that attempt to optimize database interaction speed but none that I found that do what I described above. Might be wrong though.",
                    "author_fullname": "t2_gz5apszd",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "sew: SQLite Extensions and Wrappers",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1b4mn60",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.93,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 13,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 13,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1709454056.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1709380613.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/icyveins7/sew\"&gt;https://github.com/icyveins7/sew&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Motivation&lt;/h1&gt;\n\n&lt;p&gt;This project started because at work I realised I was copying / editing code to create tables / insert rows etc in many different scripts. Oftentimes the structure of the tables, and the way I inserted the data, was the same; just inserting all columns.&lt;/p&gt;\n\n&lt;p&gt;So at first I started auto-generating my CREATE TABLE and INSERT statements, but then it eventually grew into this.&lt;/p&gt;\n\n&lt;h1&gt;What This Project Does&lt;/h1&gt;\n\n&lt;p&gt;The goal of this package is essentially to reduce the code typed for simple CRUD operations.&lt;/p&gt;\n\n&lt;p&gt;I pretty much only use this now because I can always dip down to make custom statements if I want to anyway (which still happens for more complex things like inner joins).&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an example:&lt;/p&gt;\n\n&lt;p&gt;Before:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import sqlite3 as sq\ncon = sq.connect(&amp;quot;path/to/db&amp;quot;)\ncur = con.cursor()\ncur.execute(&amp;quot;select * from mytable where ...&amp;quot;)\nresults = cur.fetchall()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import sew\ndb = sew.Database(&amp;quot;path/to/db&amp;quot;)\ndb[&amp;#39;mytable&amp;#39;].select(&amp;quot;*&amp;quot;, ...)\nresults = db.fetchall()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;This is really for anyone who uses SQLite from python\u2019s in built library.&lt;/p&gt;\n\n&lt;p&gt;Hopefully someone else will find this useful; it\u2019s my first ever package uploaded to PyPI so things may not be as crisp as they should be, but constructive feedback is welcome. Otherwise, ask me anything here!&lt;/p&gt;\n\n&lt;h1&gt;Comparisons&lt;/h1&gt;\n\n&lt;p&gt;I think there are other libraries out there that attempt to optimize database interaction speed but none that I found that do what I described above. Might be wrong though.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?auto=webp&amp;s=4d033215b34a55d2e0ae8313a5e945f1974aaf56",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3974d9bcd96b365175a9892ea1b34e5aac1a25e4",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=08b4f1aaa2c4e5bc2d8a0967c949606e60ce6e19",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e9b0071f8c7c0d7c41f80a239b2985ff4cdb08f1",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0cbd658a77c5dc83be64b78145a708b3fd4c8bc1",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=526522177d045238a6d74aec5771e06b2053e584",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ROs8CUuK9aIk0Er8yamAm1DRN11Qm1uYhdGj9ltNiiE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=5bfb236f4cdd249059c6f9cd0e3224df8c9d6485",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "xA098EX4Vx9sqFz8F2gP-5ztKy1BEWWONSHT-DfWNQ0"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1b4mn60",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Ok-Matter9741",
                    "discussion_type": null,
                    "num_comments": 3,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1b4mn60/sew_sqlite_extensions_and_wrappers/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1b4mn60/sew_sqlite_extensions_and_wrappers/",
                    "subreddit_subscribers": 1212845,
                    "created_utc": 1709380613.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            }
        ],
        "before": "t3_1b52uds"
    }
}